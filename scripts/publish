#!/bin/sh
#
# Static Site Generator

# declare locations
rootdir=~/blog
sourcedir="$rootdir/pages/recipes"
destdir="$rootdir/output"
logfile="$rootdir/logfile"

# help
usage () {
cat<<EOF

usage: publish [ command | file ]

Static Site Generator. Takes article in markdown, places it inside HTML template and updates index.

commands:
    update          check for changes in .md source and regenerate html equivalents

EOF
exit 1
}

# exit with error
bail () {
    printf "Error: %s \n" "$1"
    exit 1
}

# check if resources exist
setup () {
    [ -e "$sourcedir" ] || bail "sourcedir not found"
    [ -e "$destdir" ] || bail "destdir not found"
    [ -e "$logfile" ] || printf 'creating log file…\n' && touch "$rootdir/logfile"
}

update () {
    printf "checking posts to be updated…\n"
    find "$sourcedir" -type f | while IFS= read -r file; do
        publish "$file"
    done
    cleanup
    exit 0
}

cleanup () {
    # update logfile
    [ -e "$logfile.old" ] && diff "$logfile" "$logfile.old" >/dev/null && exit 0
    cp "$logfile" "$logfile.old"
    sort -u "$logfile.old" > "$logfile"
    rm "$logfile.old"
    # update index.html with list of pages
}

check (){
    # this is duplicated later, can that be avoided?
    checksum=$(sha1sum "$1" | awk '{print $1}')
    grep -q -F "$checksum" < "$logfile" \
        && return
}

publish () {
    check "$1" || printf "publishing %s\n" "$1"
    title=$(awk '/^# /' < "$1" | tr -d '# ' | tr [:upper:] [:lower:])
    outfile="$destdir/$title.html"
    cat "$rootdir/templates/prepend.html" > "$outfile"
    lowdown "$1" >> "$outfile"
    cat "$rootdir/templates/append.html" >> "$outfile"
    # update log file
    checksum=$(sha1sum "$1" | awk '{print $1}')
    printf "%s %s %s\n" $(date +%s) $checksum $title >> $logfile
}

setup
[ $# -eq 0 ] || [ $# -gt 1 ] && usage
[ "$1" == "update" ] && update
[ -f "$1" ] && infile="$1" || bail "file not found"
publish "$infile"

# TODO
# How to handle nav bar changes?
